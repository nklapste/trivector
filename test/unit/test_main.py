#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""pytests for __main__.py"""

import argparse
import os

import pytest
from svglib.svglib import svg2rlg
import numpy

from trivector.__main__ import get_parser, main


def test_get_parser():
    parser = get_parser()
    assert isinstance(parser, argparse.ArgumentParser)


def gen_test_image(image_path: str):
    image_array = [
        137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0,
        0, 200, 0, 0, 0, 200, 8, 6, 0, 0, 0, 173, 88, 174, 158, 0, 0, 0, 4,
        115, 66, 73, 84, 8, 8, 8, 8, 124, 8, 100, 136, 0, 0, 0, 9, 112, 72,
        89, 115, 0, 0, 11, 19, 0, 0, 11, 19, 1, 0, 154, 156, 24, 0, 0, 3,
        43, 73, 68, 65, 84, 120, 156, 237, 221, 193, 110, 163, 48, 20, 64,
        209, 206, 168, 255, 255, 203, 51, 251, 44, 174, 21, 192, 177, 33,
        231, 236, 41, 52, 237, 149, 37, 30, 14, 63, 63, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 19, 253, 57, 120, 220, 191, 75, 175, 98, 236, 232, 117,
        114, 15, 219, 254, 63, 253, 157, 121, 21, 112, 119, 2, 129, 32, 16,
        8, 2, 129, 32, 16, 8, 2, 129, 32, 16, 8, 191, 147, 126, 174, 185, 5,
        239, 184, 250, 255, 229, 178, 185, 138, 21, 4, 130, 64, 32, 8, 4,
        130, 64, 32, 8, 4, 130, 64, 32, 8, 4, 130, 64, 32, 8, 4, 130, 64,
        32, 8, 4, 194, 172, 103, 177, 222, 245, 233, 61, 201, 239, 58, 251,
        172, 208, 236, 223, 111, 247, 235, 59, 107, 217, 179, 125, 86, 16,
        8, 2, 129, 32, 16, 8, 2, 129, 32, 16, 8, 2, 129, 32, 16, 8, 71, 231,
        32, 159, 190, 47, 61, 251, 124, 103, 231, 0, 163, 227, 103, 207, 41,
        102, 159, 127, 247, 207, 255, 213, 101, 215, 107, 5, 129, 32, 16, 8,
        2, 129, 32, 16, 8, 2, 129, 32, 16, 8, 2, 129, 176, 203, 126, 144,
        179, 102, 207, 1, 70, 86, 239, 199, 88, 253, 93, 200, 171, 63, 255,
        105, 172, 32, 16, 4, 2, 65, 32, 16, 4, 2, 65, 32, 16, 4, 2, 65, 32,
        16, 158, 50, 7, 89, 125, 159, 253, 238, 251, 49, 206, 218, 253, 250,
        14, 179, 130, 64, 16, 8, 4, 129, 64, 16, 8, 4, 129, 64, 16, 8, 4,
        129, 64, 184, 203, 28, 228, 238, 239, 175, 56, 59, 39, 89, 189, 223,
        98, 247, 207, 127, 26, 43, 8, 4, 129, 64, 16, 8, 4, 129, 64, 16, 8,
        4, 129, 64, 16, 8, 132, 199, 62, 199, 255, 97, 171, 223, 15, 226,
        239, 56, 137, 21, 4, 130, 64, 32, 8, 4, 130, 64, 32, 8, 4, 130, 64,
        32, 8, 4, 194, 183, 236, 7, 121, 250, 126, 139, 213, 251, 77, 86,
        127, 126, 211, 88, 65, 32, 8, 4, 130, 64, 32, 8, 4, 130, 64, 32, 8,
        4, 130, 64, 32, 236, 50, 7, 217, 125, 63, 197, 234, 227, 207, 90,
        125, 254, 145, 109, 175, 207, 10, 2, 65, 32, 16, 4, 2, 65, 32, 16,
        4, 2, 65, 32, 16, 4, 2, 97, 245, 253, 239, 171, 124, 251, 156, 98,
        245, 241, 35, 179, 247, 243, 76, 99, 5, 129, 32, 16, 8, 2, 129, 32,
        16, 8, 2, 129, 32, 16, 8, 2, 129, 176, 203, 28, 100, 246, 125, 252,
        145, 217, 63, 223, 249, 207, 157, 127, 25, 43, 8, 4, 129, 64, 16, 8,
        4, 129, 64, 16, 8, 4, 129, 64, 16, 8, 132, 109, 239, 63, 191, 184,
        251, 126, 135, 167, 255, 252, 213, 199, 79, 99, 5, 129, 32, 16, 8,
        2, 129, 32, 16, 8, 2, 129, 32, 16, 8, 2, 129, 112, 151, 57, 200,
        200, 234, 253, 32, 171, 143, 31, 121, 202, 223, 249, 227, 172, 32,
        16, 4, 2, 65, 32, 16, 4, 2, 65, 32, 16, 4, 2, 65, 32, 16, 238, 242,
        158, 244, 145, 213, 239, 175, 152, 109, 245, 251, 73, 86, 179, 31,
        4, 118, 36, 16, 8, 2, 129, 32, 16, 8, 2, 129, 32, 16, 8, 2, 129,
        176, 203, 28, 100, 228, 233, 251, 37, 118, 127, 255, 198, 215, 206,
        97, 172, 32, 16, 4, 2, 65, 32, 16, 4, 2, 65, 32, 16, 4, 2, 65, 32,
        16, 118, 153, 131, 220, 253, 62, 253, 232, 252, 187, 127, 111, 214,
        89, 219, 190, 223, 227, 44, 43, 8, 4, 129, 64, 16, 8, 4, 129, 64,
        16, 8, 4, 129, 64, 16, 8, 132, 93, 230, 32, 171, 239, 227, 143, 172,
        126, 15, 249, 200, 234, 57, 195, 234, 243, 79, 99, 5, 129, 32, 16,
        8, 2, 129, 32, 16, 8, 2, 129, 32, 16, 8, 2, 129, 112, 116, 14, 242,
        233, 231, 255, 87, 239, 167, 120, 250, 123, 216, 71, 118, 159, 83,
        189, 186, 236, 243, 176, 130, 64, 16, 8, 4, 129, 64, 16, 8, 4, 129,
        64, 16, 8, 4, 129, 64, 56, 122, 127, 252, 177, 223, 131, 196, 35,
        152, 131, 192, 39, 8, 4, 130, 64, 32, 8, 4, 130, 64, 32, 8, 4, 130,
        64, 32, 8, 4, 130, 64, 32, 8, 4, 130, 64, 32, 204, 250, 110, 222,
        171, 247, 48, 123, 182, 235, 217, 182, 221, 243, 110, 5, 129, 32,
        16, 8, 2, 129, 32, 16, 8, 2, 129, 32, 16, 8, 2, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 56, 239, 63, 169, 44, 80, 125, 75, 214, 2, 231, 0, 0, 0, 0,
        73, 69, 78, 68, 174, 66, 96, 130
    ]
    image_array = numpy.array(image_array, dtype=numpy.uint8)
    numpy.set_printoptions(formatter={'int': hex})
    image_array = numpy.array(image_array)
    with open(image_path, "wb") as f:
        f.write(image_array.tostring())


@pytest.fixture(scope="session")
def image_file(tmpdir_factory):
    image_path = str(tmpdir_factory.mktemp("data").join("test_image.png"))
    gen_test_image(image_path)
    return image_path


@pytest.fixture(scope="function")
def output_path(tmpdir_factory):
    output_path = str(tmpdir_factory.mktemp("data").join("output_image.png"))
    return output_path


def test_main(image_file, output_path):
    exit_code = main([image_file, output_path, "15"])
    assert exit_code == 0
    assert os.path.isfile(output_path)
    drawing = svg2rlg(output_path)
    assert drawing
    assert drawing.contents
